#![allow(dead_code, unused_doc_comments)]

use super::ARRAY_LEN;

/// #  Обращение к структуре стика
pub enum StickCommands {
    /// # Запрос положения стика
    /**
     * Запрос: 1,0,0,0,0,0,0,0,0;
     *
     * Ответ: 1,(текущая координата x),( текущая координата y),0,0,0,0,0,1;
     */
    RequestingThePositionOfTheStick,

    /// # Запрос параметров
    /**
     * Запрос: 2,(параметр стика),0,0,0,0,0,0,0;
     *
     * Ответ: 2,(параметр стика),(значение параметра),0,0,0,0,0,1;
     *
     * Коды параметров:
     *
     *      1 - центр оси x (Значение АЦП)
     *      2 - центр оси y (Значение АЦП)
     *      3 - радиус физической мертвой зоны (Значение АЦП)
     *      4 - виртуальная внутренняя мертвая зона (Процент от физической мертвой зоны)
     */
    RequestForParameters,

    /// # Запрос ascii кодов положений стика
    /**
     * **Все коды являются dec ascii.**
     *
     * Запрос: 3,0,0,0,0,0,0,0,0;
     *
     * Ответ: 1,3,(код "Вверх"),(код "Вправо"),(код "Вниз"),(код "Влево"),0,0,1;
     *
     */
    RequestingAsciiCodesForStickPositions,

    /// # Настройка параметров стика
    /**
     * Запрос: 4,(параметр),(значение параметра),0,0,0,0,0,0;
     *
     * Ответ: 4,(параметр),(значение параметра),0,0,0,0,0,1;
     * Коды параметров:
     *
     *      1 - центр оси x (Значение АЦП) (Не рекомендуется менять вручную)
     *      2 - центр оси y (Значение АЦП) (Не рекомендуется менять вручную)
     *      3 - радиус физической мертвой зоны (Значение АЦП) (Не рекомендуется менять вручную)
     *      4 - виртуальная внутренняя мертвая зона (Процент от физической мертвой зоны от 1 до 100)
     */
    ConfiguringStickSettings,

    /// # Настройка ascii кодов положений стика
    /**
     * Запрос: 5,(положение стика),(dec ascii код),0,0,0,0,0,0;
     *
     * Ответ: 5,(положение стика),(dec ascii код),0,0,0,0,0,1;
     * Положения стика:
     *   
     *      1 - вверх
     *      2 - влево
     *      3 - вниз
     *      5 - вправо
     */
    ConfiguringAsciiCodesForStickPositions,

    /// # Калибровка стика
    /**
     * Запрос: 6,0,0,0,0,0,0,0,0;
     *
     * Первый ответ: 6,(текущий центр оси x), (текущий центр оси y), (текущая физическая мертвая зона),0,0,0,1,1;
     *
     * Второй ответ: 6,0,0,0,0,0,0,2,1;
     *
     * Третий ответ: 6,(новый центр оси x), (новый центр оси y), (новая физическая мертвая зона),0,0,0,3,1;
     */
    /**
     * > **_CAUTION:_**
     *
     * > Во время калибровки кнопки устройства работать не будут, также устройство не будет отвечать на команды.
     * > Сразу после первого ответа начинается калибровка центрального положения, во время которой нельзя трогать устройство.
     *
     * > Рекомендуется оповестить об этом пользователя до отправления запроса. На этот процесс дается 1 секунда.
     *
     * > Сразу после второго ответа начинается калибровка физической мертвой зоны. Во время этого процесса необходимо
     * > максимально отклонить стик, и вращать его по кругу. На этот процесс дается 5 секунд.
     *
     * > В третьем ответе приходят результаты калибровки. После этого процесс калибровки завершен.
     */
    CalibratingTheStick,
}

/// # Обращение к структуре переключателя
pub enum SwitchCommands {
    /// # Запрос состояния переключателя
    /**
     * Запрос:7,(номер переключателя),0,0,0,0,0,0,0;
     * Ответ: 7,(номер переключателя),(состояние переключателя),0,0,0,0,0,1;
     *
     * > **_NOTE:_** Переключатели нумеруются по порядку сверху вниз, слева на право
     *
     * > Состояние переключателя:
     *
     * >     1 - не нажат
     * >     2 - нажат
     */
    RequestingTheStatusOfTheSwitch,

    /// # Запрос ascii кодов переключателя
    /**
     * Запрос: 8,(номер переключателя),0,0,0,0,0,0,0;
     *
     * Ответ: 8,(номер переключателя),(код1), (код2), (код3),(код4),(код5),(код6),1;
     *
     * > **_NOTE:_** Коды в формате dec ascii.
     */
    RequestingAsciiSwitchCodes(u16),

    /// # Настройка ascii кодов переключателя
    /**
     * Запрос: 9,(номер переключателя),(код1), (код2), (код3),(код4),(код5),(код6),0;
     *
     * Ответ: 9,(номер переключателя),(код1), (код2), (код3),(код4),(код5),(код6),1;
     *
     * > **_NOTE:_** Коды в формате dec ascii.
     */
    ConfiguringAsciiSwitchCodes,
}

/// # Обращение к структуре профиля
pub enum ProfileCommands {
    /// # Запрос текущего активного профиля
    /**
     * Запрос: 10,0,0,0,0,0,0,0,0;
     * Первый ответ: 10,(номер профиля),0,0,0,0,0,0,1;
     */
    RequestingTheCurrentActiveProfile,

    /// # Запрос названия профиля
    /**
     * Запрос: 11,0,0,0,0,0,0,0,0;
     * Первый ответ: 11,(количество символов),0,0,0,0,0,1,1;
     *
     * Второй ответ: (Название профиля);
     *
     * Третий ответ: 11,(количество символов),0,0,0,0,0,3,1;
     *
     * > **_NOTE:_**
     * > Название профиля - это char массив ASCII кодов. Длинна - от 3 до 15 байтов. Рекомендуется не отправлять
     * > других запросов в буфер до получения третьего ответа на этот запрос.
     *
     * > В случаи, если количество символов полученного названия отличается от посчитанного устройством,
     * > рекомендуется отправить повторный запрос.
     */
    RequestForAProfileName,

    /// # Записать название профиля
    /**
     * Запрос: 12,(количество символов),0,0,0,0,0,0,0;
     * Первый ответ: 12,(количество символов),0,0,0,0,0,1,1;
     *
     * Передача названия профиля: (название профиля);
     *
     * Второй ответ: 12,(количество символов),0,0,0,0,0,2,1;
     *
     * > **_NOTE:_**
     * > Название профиля - это char массив ASCII кодов. Длинна - от 3 до 15 байтов.
     * > Во втором ответе количество символов считается заново, в случаи несовпадение количества символов
     * > рекомендуется повторить запрос.
     * > Рекомендуется не отправлять других запросов в буфер до получения третьего ответа на этот запрос.
     */
    WriteDownTheNameOfTheProfile,

    /// # Записать текущий профиль в ram
    /**
     * Запрос: 13,(номер профиля),0,0,0,0,0,0,0;
     *
     * Ответ: 13,(номер профиля),0,0,0,0,0,0,1;
     *
     * > **_NOTE:_** Для записи доступно 4 профиля
     */
    WriteTheCurrentProfileToRam,

    /// # Записать текущий профиль во flash
    /**
     * Запрос: 14,(номер профиля),0,0,0,0,0,0,0;
     *
     * Ответ: 14,(номер профиля),0,0,0,0,0,0,1;
     *
     * > **_NOTE:_** Для записи доступно 4 профиля
     */
    WriteTheCurrentProfileInFlash,

    /// # Загрузить профиль из ram в текущий
    /**
     * Запрос: 15,(номер профиля),0,0,0,0,0,0,0;
     *
     * Ответ: 15,(номер профиля),0,0,0,0,0,0,1;
     *
     * > **_NOTE:_** Для загрузки доступно 4 профиля
     */
    UploadAProfileFromRamToTheCurrentOne,

    /// # Загрузка профилей из flash в ram
    /**
     * Запрос: 16,0,0,0,0,0,0,0,0;
     *
     * Ответ: 16,0,0,0,0,0,0,0,1;
     *
     * > **_NOTE:_** Загружает все профили из flash в ram. В следствии этого все профили в ram, а также
     * > активный профиль, будут перезаписаны.
     */
    LoadingProfilesFromFlashToRam,
}

/// # Обращение к устройству
pub enum DeviceCommands {
    /// # Запрос информации об устройстве
    /**
     * Запрос: 17,0,0,0,0,0,0,0;
     *
     * Ответ: 17,(название устройства),(количество доступных для настройки переключателей),(серийный номер)
     * ,(год изготовления),(версия прошивки),0,0,1;
     */
    RequestingDeviceInformation,

    /// # Записать информацию об устройстве
    /**
     * Запрос: 18,(серийный номер),(год изготовления),0,0,0,0,0,0;
     *
     * Ответ: 18,(серийный номер),(год изготовления),0,0,0,0,0,1;
     */
    RecordDeviceInformation,
}

/// # Пустой запрос
pub enum EmptyCommand {
    /// Проверка на подключено ли устройство.
    /**
     *
     * Запрос: 101,0,0,0,0,0,0,0,0;
     *
     * Ответ: 101,0,0,0,0,0,0,0,1;
     */
    Empty,
}

impl StickCommands {
    pub fn value(&self) -> [u16; ARRAY_LEN] {
        match self {
            Self::RequestingThePositionOfTheStick => [1, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::RequestForParameters => [2, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::RequestingAsciiCodesForStickPositions => [3, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::ConfiguringStickSettings => [4, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::ConfiguringAsciiCodesForStickPositions => [5, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::CalibratingTheStick => [6, 0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
}
impl SwitchCommands {
    pub fn value(&self) -> [u16; ARRAY_LEN] {
        match self {
            Self::RequestingTheStatusOfTheSwitch => [7, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::RequestingAsciiSwitchCodes(button_number) => {
                [8, *button_number, 0, 0, 0, 0, 0, 0, 0]
            }
            Self::ConfiguringAsciiSwitchCodes => [9, 0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
}
impl ProfileCommands {
    pub fn value(&self) -> [u16; ARRAY_LEN] {
        match self {
            Self::RequestingTheCurrentActiveProfile => [10, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::RequestForAProfileName => [11, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::WriteDownTheNameOfTheProfile => [12, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::WriteTheCurrentProfileToRam => [13, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::WriteTheCurrentProfileInFlash => [14, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::UploadAProfileFromRamToTheCurrentOne => [15, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::LoadingProfilesFromFlashToRam => [16, 0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
}
impl DeviceCommands {
    pub fn value(&self) -> [u16; ARRAY_LEN] {
        match self {
            Self::RequestingDeviceInformation => [17, 0, 0, 0, 0, 0, 0, 0, 0],
            Self::RecordDeviceInformation => [18, 0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
}
impl EmptyCommand {
    pub fn value(&self) -> [u16; ARRAY_LEN] {
        match self {
            Self::Empty => [101, 0, 0, 0, 0, 0, 0, 0, 0],
        }
    }
}
